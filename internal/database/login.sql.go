// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: login.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const login = `-- name: Login :one
SELECT id, created_at, updated_at, email, hashed_password FROM users WHERE email = $1
`

func (q *Queries) Login(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, login, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const retrieveRefreshToken = `-- name: RetrieveRefreshToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) RetrieveRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, retrieveRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW(),
    updated_at = NOW()

WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}

const storeRefreshToken = `-- name: StoreRefreshToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES ( 
    $1,
    NOW(),
    NOW(),
    $2,
    NOW() + INTERVAL '60 days',
    NULL
)
`

type StoreRefreshTokenParams struct {
	Token  string
	UserID uuid.NullUUID
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, storeRefreshToken, arg.Token, arg.UserID)
	return err
}
